// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryPartner {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password       String
  phoneNumber    String   @unique
  isActive       Boolean  @default(false)
  isVerified     Boolean  @default(false)
  profileImage   String?
  identification String?
  longitude      Float?
  latitude       Float?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  phoneNumber2   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  Order              Order[]
  isDeleted          Boolean             @default(false)
  deletedAt          DateTime?
  MealSchedule       MealSchedule[]
  DeliveryBankDetail DeliveryBankDetail?
}

model DeliveryBankDetail {
  id            Int      @id @default(autoincrement())
  deliveryId    Int      @unique
  accountHolder String
  accountNumber String   @unique
  ifscCode      String
  bankName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  deliveryPartner DeliveryPartner @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  phoneNumber  String?       @unique
  isActive     Boolean       @default(true)
  isVerified   Boolean       @default(true)
  isDeleted    Boolean       @default(false)
  deletedAt    DateTime?
  profileImage String? // URL of the user's profile image
  longitude    Float?
  latitude     Float?
  gender       String? // e.g.,
  otp          String?       @db.VarChar(100)
  otp_expiry   DateTime?     @db.DateTime
  otp_verified Boolean?      @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  UserAddress  UserAddress[]
  CartItem     CartItem[]
  Order        Order[]

  UserWallet            UserWallet[]
  UserWalletTransaction UserWalletTransaction[]
  // notifications Notification[]

  // UserCurrentLocation UserCurrentLocation[]
}

enum UserAddressType {
  HOME
  WORK
  OTHER
}

model UserAddress {
  id          Int             @id @default(autoincrement())
  userId      Int
  address     String
  city        String
  state       String
  zipCode     String
  phoneNumber String?
  longitude   Float?
  latitude    Float?
  addressType UserAddressType @default(HOME)
  isDefault   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// model UserCurrentLocation {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   longitude Float
//   latitude  Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id])
// }

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  USER
  VENDOR
  DELIVERY_PARTNER
}

model Notification {
  id        Int       @id @default(autoincrement())
  title     String
  message   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())

  // Target
  userId Int?

  role Role? // if targeting a role (optional)

  // Add this if you want updatedAt tracking
  updatedAt DateTime @updatedAt
}

model Vendor {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  phoneNumber  String  @unique
  businessName String?
  logo         String?
  gallery      String? // Comma-separated image URLs or use a related model
  description  String?
  phoneNumber2 String?

  // Address
  address   String?
  city      String?
  state     String?
  longitude Float?
  latitude  Float?

  // Time Windows
  breakfastStart String?
  breakfastEnd   String?
  lunchStart     String?
  lunchEnd       String?
  eveningStart   String?
  eveningEnd     String?
  dinnerStart    String?
  dinnerEnd      String?

  // Status
  isActive  Boolean      @default(false)
  status    VendorStatus @default(PENDING)
  isDeleted Boolean      @default(false)
  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  VendorWallet            VendorWallet[]
  VendorWalletTransaction VendorWalletTransaction[]
  Meal                    Meal[]
  Order                   Order[]
  MealSchedule            MealSchedule[]
  VendorBankDetail        VendorBankDetail? // Added relation to VendorBankDetail
}

model VendorBankDetail {
  id            Int      @id @default(autoincrement())
  vendorId      Int      @unique
  accountHolder String
  accountNumber String   @unique
  ifscCode      String
  bankName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model VendorWallet {
  id        Int      @id @default(autoincrement())
  vendorId  Int
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id])
}

model UserWallet {
  id        Int      @id @default(autoincrement())
  userId    Int
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model UserWalletTransaction {
  id        Int                   @id @default(autoincrement())
  userId    Int
  amount    Float
  type      WalletTransactionType
  paymentId String?               @unique
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Settings {
  id                        Int   @id @default(autoincrement())
  gst                       Float
  vendorCommission          Float
  deliveryPartnerCommission Float
  adminCommission           Float
  deliveryChargePerKm       Float
  platformCharge            Float
}

enum WalletTransactionType {
  CREDIT
  DEBIT
}

model VendorWalletTransaction {
  id        Int                   @id @default(autoincrement())
  vendorId  Int
  amount    Float
  type      WalletTransactionType
  paymentId String?               @unique
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id])
}

// products
// ✅ ENUMS
enum MealConfigType {
  SINGLE
  CUSTOMIZABLE
}

enum MealType {
  Lunch
  Dinner
  Breakfast
  Evening
}

// enum CuisineType {
//   Marathi
//   NorthIndian
//   SouthIndian
//   Gujarati
//   Bengali
//   Continental
// }

// MEAL
model Meal {
  id          Int            @id @default(autoincrement())
  vendorId    Int
  title       String // e.g., "Protein Thali"
  description String? // e.g., "Includes dal, roti, sabzi"
  image       String? // main image thumbnail
  type        MealType // lunch or dinner
  configType  MealConfigType // SINGLE or CUSTOMIZABLE
  cuisine     String?
  isVeg       Boolean // true/false

  // Nutrition Info
  energyKcal  Int? // e.g. 500
  proteinGram Float? // e.g. 20.5
  fatGram     Float?
  fiberGram   Float?
  carbsGram   Float?

  basePrice   Float // e.g. 149.99
  isAvailable Boolean @default(true)
  isWeekly    Boolean @default(false)

  // ✅ Relations
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  mealImages       MealImage[] // additional images
  mealOptionGroups MealOptionGroup[] // config option groups
  dietaryTags      MealDietaryTag[] // "Gluten Free", etc
  ingredients      MealIngredient[] // "Paneer", "Cumin", etc
  availableDays    MealAvailableDay[] // "MON", "TUE", etc
  cartItems        CartItem[] // cart items containing this meal
  orderItems       OrderItem[] // order items containing this meal

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isDeleted  Boolean   @default(false) // soft delete
  isVerified Boolean   @default(false) // for vendor verification
  deletedAt  DateTime? // soft delete timestamp
}

model MealAvailableDay {
  id     Int    @id @default(autoincrement())
  mealId Int
  day    String // e.g. "MON", "TUE", "FRI"

  meal Meal @relation(fields: [mealId], references: [id])
}

model MealImage {
  id     Int    @id @default(autoincrement())
  mealId Int
  url    String // image URL

  meal Meal @relation(fields: [mealId], references: [id])
}

model MealOptionGroup {
  id         Int     @id @default(autoincrement())
  mealId     Int
  title      String // e.g. "Choose 1 Roti"
  isRequired Boolean
  minSelect  Int?
  maxSelect  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meal    Meal         @relation(fields: [mealId], references: [id])
  options MealOption[]
}

model MealOption {
  id                Int     @id @default(autoincrement())
  mealOptionGroupId Int
  name              String // e.g. "Tandoori Roti"
  price             Float // e.g. 10
  image             String? // optional image
  isDefault         Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  optionGroup MealOptionGroup @relation(fields: [mealOptionGroupId], references: [id])
}

model MealDietaryTag {
  id     Int    @id @default(autoincrement())
  mealId Int
  tag    String // e.g. "High Protein", "Low Carb"

  meal Meal @relation(fields: [mealId], references: [id])
}

model MealIngredient {
  id     Int    @id @default(autoincrement())
  mealId Int
  name   String // e.g. "Paneer", "Tomato"

  meal Meal @relation(fields: [mealId], references: [id])
}

model Banner {
  id          Int      @id @default(autoincrement())
  image       String // URL of the banner image
  title       String? // Optional title for the banner
  description String? // Optional description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
}

// CART MODELS
model CartItem {
  id           Int       @id @default(autoincrement())
  userId       Int
  mealId       Int
  quantity     Int       @default(1)
  totalPrice   Float // base price + options price * quantity
  deliveryDate DateTime? // when user wants this meal delivered
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id])
  meal            Meal             @relation(fields: [mealId], references: [id])
  selectedOptions CartItemOption[] // selected options for customizable meals

  @@unique([userId, mealId]) // User can only have one cart item per meal (can update quantity)
}

model CartItemOption {
  id         Int   @id @default(autoincrement())
  cartItemId Int
  optionId   Int // references MealOption.id
  quantity   Int   @default(1) // how many of this option selected
  price      Float // price of the option at time of adding to cart

  cartItem CartItem @relation(fields: [cartItemId], references: [id], onDelete: Cascade)

  @@unique([cartItemId, optionId]) // Each option can only be selected once per cart item
}

// ORDER SYSTEM MODELS
enum OrderType {
  ONETIME
  WEEKLY
  MONTHLY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CASH_ON_DELIVERY
  RAZORPAY
  UPI
  CARD
  WALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  vendorId  Int
  orderType OrderType   @default(ONETIME)
  status    OrderStatus @default(PENDING)

  // Pricing
  subtotal        Float // total of all items
  deliveryCharges Float @default(0)
  taxes           Float @default(0)
  discount        Float @default(0)
  totalAmount     Float // final amount after all calculations

  // Payment
  paymentType   PaymentType
  paymentId     String? // external payment gateway ID
  paymentStatus PaymentStatus @default(PENDING)

  // Delivery Address (stored to preserve data)
  deliveryAddress String
  deliveryCity    String
  deliveryState   String
  deliveryZipCode String
  deliveryPhone   String?
  deliveryLat     Float?
  deliveryLng     Float?

  // Subscription Details
  subscriptionStartDate    DateTime?
  subscriptionEndDate      DateTime?
  totalMealsInSubscription Int? // calculated based on orderType

  // Delivery Partner Assignment
  deliveryPartnerId Int?

  // Notes
  orderNotes   String?
  cancelReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id])
  vendor          Vendor           @relation(fields: [vendorId], references: [id])
  deliveryPartner DeliveryPartner? @relation(fields: [deliveryPartnerId], references: [id])
  orderItems      OrderItem[]
  mealSchedules   MealSchedule[]
}

model OrderItem {
  id      Int @id @default(autoincrement())
  orderId Int

  // Meal Details (preserved even if meal is deleted)
  mealId          Int? // can be null if meal is deleted
  mealTitle       String // preserved meal title
  mealDescription String? // preserved meal description
  mealImage       String? // preserved meal image
  mealType        String // preserved meal type (Lunch, Dinner, etc.)
  mealCuisine     String // preserved cuisine type
  isVeg           Boolean // preserved veg status

  quantity   Int
  unitPrice  Float // price per unit at time of order
  totalPrice Float // unitPrice * quantity + options

  createdAt DateTime @default(now())

  // Relations
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  meal            Meal?             @relation(fields: [mealId], references: [id])
  selectedOptions OrderItemOption[]
}

model OrderItemOption {
  id          Int @id @default(autoincrement())
  orderItemId Int

  // Option Details (preserved even if option is deleted)
  optionId   Int? // can be null if option is deleted
  optionName String // preserved option name
  quantity   Int
  unitPrice  Float // price per option at time of order
  totalPrice Float // unitPrice * quantity

  // Relations
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
}

enum MealScheduleStatus {
  SCHEDULED
  PREPARED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  MISSED
}

model MealSchedule {
  id          Int  @id @default(autoincrement())
  orderId     Int
  orderItemId Int? // which specific meal from the order
  vendorId    Int // direct vendor assignment for delivery operations

  // Schedule Details
  scheduledDate     DateTime // date when meal should be delivered
  scheduledTimeSlot String // e.g., "12:00-14:00" for lunch
  mealType          String // Breakfast, Lunch, Dinner, Evening

  // Meal Details (preserved)
  mealTitle String
  mealImage String?
  quantity  Int

  // Status
  status             MealScheduleStatus @default(SCHEDULED)
  actualDeliveryTime DateTime?

  // Delivery Partner Assignment
  deliveryPartnerId Int?

  // Notes
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order           Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vendor          Vendor           @relation(fields: [vendorId], references: [id])
  deliveryPartner DeliveryPartner? @relation(fields: [deliveryPartnerId], references: [id])

  @@index([scheduledDate, status]) // for cron job queries
  @@index([orderId, scheduledDate]) // for user order tracking
  @@index([vendorId, scheduledDate]) // for vendor schedule queries
  @@index([deliveryPartnerId, scheduledDate]) // for delivery partner queries
}

enum PayType {
  ORDER
  WALLET
}

// payment models
model Payments {
  id              Int     @id @default(autoincrement())
  userId          Int
  // orderId         Int
  razorpayOrderId String? // for Razorpay payments

  amount      Float
  currency    String        @default("INR") // default to INR
  signature   String
  paymentType PayType
  paymentId   String? // external payment gateway ID
  status      PaymentStatus @default(PENDING)
  source      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

//--------------model for support tickets-------------//

enum SupportRole {
  USER
  VENDOR
  DELIVERY
  ADMIN
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// enum SupportTicketPriority {
//   LOW
//   MEDIUM
//   HIGH
//   URGENT
// }

enum SupportTicketType {
  GENERAL
  TECHNICAL
  BILLING
  DELIVERY
  OTHER
}

model SupportTicket {
  id        Int                 @id @default(autoincrement())
  userId    Int // ID from User, Vendor, or DeliveryPartner
  role      SupportRole // Who created the ticket
  subject   String
  status    SupportTicketStatus @default(OPEN)
  // priority   SupportTicketPriority @default(MEDIUM)
  type      SupportTicketType   @default(GENERAL)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  messages SupportMessage[]

  @@index([userId, role])
}

model SupportMessage {
  id         Int         @id @default(autoincrement())
  ticketId   Int
  senderRole SupportRole // USER, VENDOR, DELIVERY_PARTNER, ADMIN
  senderId   Int // ID of the sender (admin/user/vendor/deliveryPartner) 
  message    String
  // attachmentUrl String?     // optional file/image
  createdAt  DateTime    @default(now())

  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}
